/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Apartment;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-09-27T18:19:31.380153700+03:00[Europe/Moscow]", comments = "Generator version: 7.8.0")
@Validated
@Tag(name = "Apartment", description = "Apartment methods")
public interface AddApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /add : add an appartment
     * add new apartment
     *
     * @param city city (required)
     * @param address address (required)
     * @param price price per month (required)
     * @return info about added apartment (status code 201)
     *         or server&#39;s error (status code 500)
     */
    @Operation(
        operationId = "addApartment",
        summary = "add an appartment",
        description = "add new apartment",
        tags = { "Apartment" },
        responses = {
            @ApiResponse(responseCode = "201", description = "info about added apartment", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Apartment.class))
            }),
            @ApiResponse(responseCode = "500", description = "server's error")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/add",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Apartment> addApartment(
        @NotNull @Parameter(name = "city", description = "city", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "city", required = true) String city,
        @NotNull @Parameter(name = "address", description = "address", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "address", required = true) String address,
        @NotNull @Parameter(name = "price", description = "price per month", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "price", required = true) Integer price
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"city\" : \"Saint-Petersburg\", \"address\" : \"Marshala Zhukova avenue 24\", \"price\" : 2400 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
